---
title: "Statistical rethinking 2 with `rstan` and the `tidyverse`"
format: html
---

<https://solomon.quarto.pub/sr2rstan/>

```{r}
#| output: false
library(tidyverse)
library(tidybayes)
library(bayesplot)
library(posterior)
library(rstan)
library(brms)

options(mc.cores = parallel::detectCores(), brms.backend = "cmdstanr")

rstan_options(auto_write = TRUE)
rstan_options(threads_per_chain = 1)

theme_set(theme_minimal())
```

```{r}
data(package = "rethinking", salamanders)
d <- salamanders
rm(salamanders)

glimpse(d)
```

```{r}
d |> 
  ggplot(aes(x = PCTCOVER, y = SALAMAN)) +
  geom_point() +
  xlim(0, 100)
```

```{r}
d <- d |> 
  mutate(count = SALAMAN,
         cover_std = (PCTCOVER - mean(PCTCOVER)) / sd(PCTCOVER)) 

head(d)
```

$$
\begin{aligned}
\text{count}_i & \sim \operatorname{Poisson}(\lambda_i) \\
\log(\lambda_i) & = a + b \times \text{cover-std}_i \\
a & \sim \operatorname{Normal}(\log(1), 1) \\
b & \sim \operatorname{Normal}(0, 1),
\end{aligned}
$$

```{r}
stan_data <- d |> 
  select(count, cover_std) |> 
  compose_data() # from `tidybayes`: convert dataframe to Stan data format (list)

str(stan_data)
```

```{stan output.var=""}
#| eval: false
functions {
  // ... function declarations and definitions ...
}
data {
  // ... declarations ...
}
transformed data {
   // ... declarations ... statements ...
}
parameters {
   // ... declarations ...
}
transformed parameters {
   // ... declarations ... statements ...
}
model {
   // ... declarations ... statements ...
}
generated quantities {
   // ... declarations ... statements ...
}
```

```{stan output.var="salamanders"}
data {
  int<lower=1> n;
  vector[n] cover_std;
  array[n] int<lower=0> count;
}
parameters {
  real a;
  real b;
}
model {
  count ~ poisson(exp(a + b * cover_std));  // Likelihood
  a ~ normal(log(1), 1);                    // Priors
  b ~ normal(0, 1);
}
```

```{r}
m <- sampling(salamanders, stan_data)
```

```{r}
check_hmc_diagnostics(m)
```

```{r}
summarise_draws(m)
```

```{r}
stan_trace(m)
```

```{r}
stan_dens(m, separate_chains = TRUE)
```

```{r}
as_draws_df(m) |> 
  expand_grid(cover_std = seq(from = -1.7, to = 1.5, length.out = 201)) |> 
  mutate(PCTCOVER = cover_std * sd(d$PCTCOVER) + mean(d$PCTCOVER),
         y_hat = exp(a + b * cover_std)) |> 
  filter(PCTCOVER >= 0 & PCTCOVER <= 100) |> 
  
  ggplot(aes(x = PCTCOVER)) +
  stat_lineribbon(aes(y = y_hat),
                  .width = 0.89, 
                  color = "blue", fill = alpha("blue", 1/3), linewidth = 1) +
  geom_point(data = d,
             aes(y = count)) +
  labs(x = "% ground coverage per site",
       y = "salamander count")
```
