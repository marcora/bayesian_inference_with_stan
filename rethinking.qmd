---
title: "Rethinking"
format:
  html:
    toc: true
    df-print: paged
---

## References

[Bayesian Inference with Stan \[YouTube playlist\]](https://youtube.com/playlist?list=PLtjJ_Rt8bTdJEeV0afADtWvqq_t0_iksX)

[Bayesian Analysis - Simon Mak](https://youtu.be/2lgg6OIjd8M)

## The Bayesian paradigm

-   Forward problem

-   Inverse problem

-   Bayes' rule

## Forward problem

```{dot}
digraph G {
    rankdir=LR;
    node [shape=box style=filled fontname="Helvetica" fontsize=14];

    Outputs [label="Outputs\n(Observables)", fillcolor="#669966", fontcolor=white];
    Model [label="Model", fillcolor="#f4a261", fontcolor=white, color="#cc5500"];
    Parameters [label="Model\nParameters", fillcolor="#4682b4", fontcolor=white];

    Model -> Outputs;
     Parameters -> Model;
}
```

## Inverse problem

```{dot}
digraph G {
    rankdir=RL;
    node [shape=box style=filled fontname="Helvetica" fontsize=14];

    Outputs [label="Outputs\n(Observables)", fillcolor="#669966", fontcolor=white];
    InverseModel [label="(Model)^-1", fillcolor="#f4a261", fontcolor=white, color="#cc5500"];
    Parameters [label="Model\nParameters", fillcolor="#4682b4", fontcolor=white];

    Outputs -> InverseModel;
    InverseModel -> Parameters;
}
```

-   Model: theoretical descriptions of the relevant processes (DGP)

-   Model parameters (unobservables): inputs for the model

-   Outputs (observables/data): outputs generated by the model

## Setup environment

```{r}
#| output: false
library(tidyverse)
library(easystats)
library(rstan)
library(cmdstanr)
library(rethinking)
library(brms)
library(posterior)
library(bayesplot)
library(loo)
library(shinystan)
library(bayestestR)
library(tidybayes)
library(tidybayes.rethinking)
library(broom)
library(broom.mixed)
library(ggformula)
library(ggdist)
library(mosaic)
library(modelsummary)
library(marginaleffects)
library(emmeans)
library(modelbased)

options(mc.cores = parallel::detectCores(), brms.backend = "cmdstanr")

rstan_options(auto_write = TRUE)
rstan_options(threads_per_chain = 1)

check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
register_knitr_engine(override = FALSE)

theme_set(theme_bw())

set.rseed(666)
```

## Scientific question and statistical estimand

XXX

## Specify scientific model

```{dot}
digraph BetaBinomialDGP {
    rankdir=TB;
    node [shape=ellipse, style=filled, fillcolor=lightgray];

    # Nodes with simple names but detailed labels
    alpha_beta [label="α, β (Hyperparameters)" fillcolor=lightblue];
    theta [label="θ (Latent Proportion)" fillcolor=lightgreen];
    y [label="y (Observed Count)" fillcolor=lightcoral];
    N [label="N (Total Trials)" fillcolor=lightgray];

    # Edges with descriptive labels
    alpha_beta -> theta [label="Beta(α, β)"];
    theta -> y [label="Binomial(n, θ)"];
    N -> y;

    # Graph Label
    label="Beta-Binomial Data Generating Process (DGP)";
    fontsize=14;
}
```

## Specify statistical model

```{r}
f <- alist(
  y ~ dbern(pi),
  pi ~ dbeta(1, 1)
)
```

## Condition statistical model

```{r}
fit <- quap(f, data = list(y = c(0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1)))
```

## Summarize posterior

```{r}
summary(fit)
```

```{r}
fit %>% tidy_draws() %>% median_qi()
```

```{r}
fit %>% tidy_draws() %>% ggplot(aes(x = pi)) + stat_halfeye()
```

\

## Print environment

```{r}
sessioninfo::session_info()
```
